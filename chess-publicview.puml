@startuml ChessPublicView_v2_0_1

	title Chess Public View v2.0.1

	class Chess {
		+play()
	}

	class Turn {
		+getCurrentPlayer()
		+change()
	}

	class Player {
		+boolean isWinner()
		+Color getColor()
		+void movePiece(Coordinate, Coordinate, Board)
	}

	enum Color {
		BLACK
		WHITE
	}

	class Board {
		-Square[8][8] squares
		+Board()
		+void show()
		+Square getSquare(Coordinate)
	}

	abstract class Piece {
		+Piece(Color)
		+Color getColor()
		+String getSimbol()
		+boolean isKing()
		+abstract boolean isValidMoveRule(Coordinate origin, Coordinate destination)
	}

	class Coordinate {
		+Coordinate(String coordinateText)
		+int getRowNumber()
		+int getColumNumber()
		+boolean isVerticalDirectionWith(Coordinate)
		+boolean isOneStepVerticalDirectionWith(Coordinate)
		+boolean isDiagonalDirection(Coordinate)
		+boolean isOneStepDiagonalDirection(Coordinate)
	}

	class Square {
		+Square()		
		+void removePiece()
		+void putPiece(Piece)
		+boolean isEmpty()
		+Piece getPiece()
	}

	class Movement {
		+Movement(Coordinate[], Board, Color currentUserColor)
		+MatchResult getResult()
	}

	enum MatchResult {
		CAPTURE
		NOT_ALLOWED
		EMPTY_SQUARE
		CHECKMATE
	}

	class King extends Piece {
	}

	class Rook extends Piece {
	}

	class Queen extends Piece {
	}

	Chess *--> "1" Board
	Chess *--> Turn
	Turn *--> "2" Player
	Player o--> Color
	Piece o--> Color
	Piece ..> Coordinate
	Player ..> Coordinate
	Player ..> Movement
	Player --> Board
	Board *--> "64" Square
	Board *--> "32" Piece
	Square o--> "0..1" Piece
	Square *--> "1" Coordinate
	Movement *--> MatchResult
	Movement --> Board
	Movement --> Square
	Movement ..> Piece

@enduml